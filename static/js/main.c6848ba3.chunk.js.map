{"version":3,"sources":["components/CharacterChip/CharacterChip.js","App.js","reportWebVitals.js","index.js"],"names":["CharacterChip","React","forwardRef","props","ref","createElement","id","data-testid","className","draggable","onDragStart","onTouchEnd","char","ActionTypes","AWS","config","region","credentials","CognitoIdentityCredentials","IdentityPoolId","reducer","state","action","type","fadeOut","payload","sourceChipId","sourceLocation","targetInputBoxId","newCharacterChips","characterChips","filter","chip","slice","newInputBoxChips","inputBoxChips","includes","replacedChipId","push","substring","incrementedIndex","animalIndex","animals","length","localStorage","setItem","newWord","name","currentWord","resetWord","decrementedIndex","nextAnimalIndex","i","concat","draggedChipId","console","log","existingChipId","existingChip","find","hasDropped","inputBoxElements","document","querySelectorAll","forEach","inputBox","style","border","setTimeout","transition","opacity","shuffledCharacters","letterSounds","App","storedInputBoxChips","JSON","parse","getItem","initialState","parseInt","dispatch","useReducer","chipRefs","setChipRefs","useState","prevWordRef","current","useRef","useEffect","sayWordWithBrowser","useCallback","word","utterance","SpeechSynthesisUtterance","rate","voice","getVoice","naturalEnglishVoices","window","speechSynthesis","getVoices","v","match","speak","handleSayWord","_word","error","sayWithBrowser","Object","keys","sort","map","boxId","_state$inputBoxChips$","replace","join","letter","sound","toUpperCase","soundOfLetter","pronounceCurrentWord","_document$getElementB","getElementById","classList","contains","remove","add","undefined","pronounceInputBoxes","e","stringify","parsedInputBoxChips","handleDragStart","currentTarget","dataTransfer","setData","nativeEvent","target","parentNode","dragImage","cloneNode","position","top","body","appendChild","setDragImage","offsetWidth","offsetHeight","removeChild","handleDragOver","preventDefault","handleTouchMove","parentId","touchLocation","targetTouches","left","pageX","pageY","handleDrop","event","getData","draggedFromLocation","handleTouchEnd","changedTouches","touchPoint","clientX","clientY","boxRect","getBoundingClientRect","right","bottom","removeAttribute","values","c","confetti","particleCount","spread","startVelocity","gravity","ticks","origin","x","y","wordCharacters","split","index","extraChars","Math","ceil","Array","from","_","randomChar","String","fromCharCode","floor","random","img","newChipRefs","reduce","acc","createRef","chipElement","addEventListener","passive","removeEventListener","wordDisplayClass","Fragment","onClick","src","alt","display","alignItems","justifyContent","inputBoxId","chipId","key","onDrop","onDragOver","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.c6848ba3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CharacterChip = React.forwardRef((props, ref) => {\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      id={props.id}\r\n      data-testid={props.id}\r\n      className=\"character-chip\"\r\n      draggable=\"true\"\r\n      onDragStart={props.onDragStart}\r\n      onTouchEnd={props.onTouchEnd}\r\n      // onTouchMove and onTouchEnd are handled differently now\r\n    >\r\n      {props.char}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default CharacterChip;","import React, { useCallback, useState, useRef, useEffect, useReducer } from 'react';\nimport './App.css';\nimport animals from './resources/animals.json';\nimport CharacterChip from './components/CharacterChip/CharacterChip';\nimport './components/CharacterChip/CharacterChip.css';\nimport AWS from 'aws-sdk';\nimport { CognitoIdentityCredentials } from 'aws-sdk';\nimport Polly from 'aws-sdk/clients/polly';\nimport confetti from 'canvas-confetti';\n\n// Define action types\nconst ActionTypes = {\n  MOVE_CHIP: 'MOVE_CHIP',\n  DROP_CHIP: 'DROP_CHIP',\n  SET_CHARACTER_CHIPS: 'SET_CHARACTER_CHIPS',\n  SET_INPUT_BOX_CHIPS: 'SET_INPUT_BOX_CHIPS',\n  SET_HAS_DROPPED: 'SET_HAS_DROPPED',\n  INIT_NEW_WORD: 'INIT_NEW_WORD',\n  SET_FADE_OUT: 'SET_FADE_OUT',\n  PROGRESS_TO_NEXT_ANIMAL: 'PROGRESS_TO_NEXT_ANIMAL',\n  INCREMENT_ANIMAL_INDEX: 'INCREMENT_ANIMAL_INDEX',\n  DECREMENT_ANIMAL_INDEX: 'DECREMENT_ANIMAL_INDEX',\n  CONGRATULATE: 'CONGRATULATE',\n};\n\nAWS.config.region = 'us-east-1';\nAWS.config.credentials = new CognitoIdentityCredentials({\n  IdentityPoolId: 'us-east-1:5ee4b58d-942a-4568-a4d5-4dcc551259c3',\n})\n\n// Define the reducer function\nconst reducer = (state, action) => {\n  //MARK: Reducer\n  switch (action.type) {\n    case ActionTypes.SET_FADE_OUT:\n      return {\n        ...state,\n        fadeOut: action.payload,\n      };\n\n    case ActionTypes.MOVE_CHIP: {\n      const { sourceChipId, sourceLocation, targetInputBoxId } = action.payload;\n      if (!targetInputBoxId) return state;\n      if (targetInputBoxId === sourceLocation) {\n        // This is a character tap.\n        // TODO: Add logic to handle character tap like make pronounce it\n        return state;\n      }\n\n      // Logic to remove the chip from its source\n      const newCharacterChips = sourceLocation === 'character-tray'\n        ? state.characterChips.filter(chip => chip.id !== sourceChipId)\n        : state.characterChips.slice(); // Create a shallow copy to modify\n\n      const newInputBoxChips = { ...state.inputBoxChips };\n\n      // If the source is an input box, clear the chip from that input box\n      if (sourceLocation.includes('input-box')) {\n        newInputBoxChips[sourceLocation] = null;\n      }\n\n      // Check if there's already a chip in the target input box\n      const replacedChipId = state.inputBoxChips[targetInputBoxId];\n      if (replacedChipId) {\n        // Add the replaced chip back to the character tray\n        newCharacterChips.push({\n          id: replacedChipId,\n          // You may need to include other properties to construct the chip object\n          // For example, if you need the character (char) associated with the chip\n          char: replacedChipId.substring(15, 16), // Modify depending on your ID structure\n        });\n      }\n\n      // Logic to place the new chip into the target box\n      newInputBoxChips[targetInputBoxId] = sourceChipId;\n\n      return {\n        ...state,\n        characterChips: newCharacterChips,\n        inputBoxChips: newInputBoxChips,\n      };\n    }\n\n    case ActionTypes.INCREMENT_ANIMAL_INDEX: {\n      const incrementedIndex = (state.animalIndex + 1) % animals.length;\n      localStorage.setItem('animalIndex', incrementedIndex);\n      const newWord = animals[incrementedIndex].name;\n      localStorage.setItem('currentWord', newWord);\n      // ... logic to update state based on incrementedIndex ...\n      return {\n        ...state,\n        currentWord: newWord,\n        resetWord: true,\n        animalIndex: incrementedIndex,\n        // fadeOut: true,\n        // ... other state updates if needed ...\n      };\n    }\n    case ActionTypes.DECREMENT_ANIMAL_INDEX: {\n      const decrementedIndex = (state.animalIndex - 1 + animals.length) % animals.length;\n      localStorage.setItem('animalIndex', decrementedIndex);\n      const newWord = animals[decrementedIndex].name;\n      localStorage.setItem('currentWord', newWord);\n      // ... logic to update state based on decrementedIndex ...\n      return {\n        ...state,\n        currentWord: newWord,\n        resetWord: true,\n        animalIndex: decrementedIndex,\n        // fadeOut: true,\n        // ... other state updates if needed ...\n      };\n    }\n\n    case ActionTypes.PROGRESS_TO_NEXT_ANIMAL: {\n      let nextAnimalIndex = (state.animalIndex + 1) % animals.length; // Wraps around to the beginning\n      localStorage.setItem('animalIndex', nextAnimalIndex); // Save the new index to localStorage\n      let newWordObject = animals[nextAnimalIndex];\n      let newWord = newWordObject.name;\n      localStorage.setItem('currentWord', newWord);\n      let newInputBoxChips = {};\n\n      for (let i = 0; i < newWord.length; i++) {\n        newInputBoxChips[`input-box-${i}`] = null;\n      }\n\n      return {\n        ...state,\n        animalIndex: nextAnimalIndex,\n        currentWord: newWord,\n        resetWord: true,\n        inputBoxChips: newInputBoxChips,\n        // fadeOut: true,\n        // Reset any other relevant state properties as needed\n      };\n    }\n    case ActionTypes.DROP_CHIP: {\n      const { draggedChipId, targetInputBoxId } = action.payload;\n      console.log('dropped', draggedChipId, targetInputBoxId);\n      const existingChipId = state.inputBoxChips[targetInputBoxId];\n\n      // Remove the dragged chip object from characterChips\n      const newCharacterChips = state.characterChips.filter(chip => chip.id !== draggedChipId);\n\n      // If there is an existing chip in the target input box, add it back to characterChips\n      if (existingChipId) {\n        const existingChip = state.characterChips.find(chip => chip.id === existingChipId);\n        if (existingChip) {\n          newCharacterChips.push(existingChip);\n        }\n      }\n\n      const newInputBoxChips = {\n        ...state.inputBoxChips,\n        [targetInputBoxId]: draggedChipId,\n      };\n\n      return {\n        ...state,\n        characterChips: newCharacterChips,\n        inputBoxChips: newInputBoxChips,\n        hasDropped: true,\n      };\n    }\n    case ActionTypes.SET_CHARACTER_CHIPS:\n      debugger;\n      return {\n        ...state,\n        characterChips: action.payload,\n      };\n    case ActionTypes.SET_INPUT_BOX_CHIPS:\n      return {\n        ...state,\n        inputBoxChips: action.payload,\n      };\n    case ActionTypes.SET_HAS_DROPPED:\n      debugger;\n      return {\n        ...state,\n        hasDropped: action.payload,\n      };\n    case ActionTypes.CONGRATULATE: {\n      // Set each input box border to solid green and then fade them out\n      const inputBoxElements = document.querySelectorAll('.input-box');\n      inputBoxElements.forEach(inputBox => {\n        inputBox.style.border = '2px solid green';\n      });\n      setTimeout(() => {\n        inputBoxElements.forEach(inputBox => {\n          inputBox.style.transition = 'opacity 1s ease-in-out';\n          inputBox.style.opacity = 0;\n        });\n      }, 1000);\n      return {\n        ...state,\n        // Reset any other relevant state properties as needed\n      };\n    }\n    case ActionTypes.INIT_NEW_WORD: {\n      const { newWord, newInputBoxChips, shuffledCharacters } = action.payload;\n      const inputBoxElements = document.querySelectorAll('.input-box');\n      inputBoxElements.forEach(inputBox => {\n        inputBox.style.border = '1px dashed grey';\n        inputBox.style.opacity = 1;\n        inputBox.style.transition = null;\n      });\n      return {\n        ...state,\n        currentWord: newWord,\n        inputBoxChips: newInputBoxChips,\n        characterChips: shuffledCharacters,\n        fadeOut: false,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nconst letterSounds = {\n  'A': 'ahhhh or ayyyyy',\n  'B': 'behhhh',\n  'C': 'kehhhh or sehhhh',\n  'D': 'dehhhhh',\n  'E': 'ehhhhh or eeeeee',\n  'F': 'fffehhhhh',\n  // Add other letters and their phonetic sounds here\n};\n\nconst getVoice = () => {\n  // Select the best voice based on the current word\n  // This is a placeholder; you'll need to replace it with your actual logic\n  const voices = window.speechSynthesis.getVoices();\n  let naturalEnglishVoices = voices.filter(v => v.name.match('Natural.*English.*United States'));\n  const emma = naturalEnglishVoices.find(v => v.name.match('Emma')) || null;\n  let voice = emma\n    || (naturalEnglishVoices.length ? naturalEnglishVoices[0] : window.speechSynthesis.getVoices()[0])\n    || null;\n  return voice;\n}\n\nfunction soundOfLetter(letter) {\n  const sound = letterSounds[letter.toUpperCase()];\n  if (sound) {\n    return sound;\n  } else {\n    console.error('Sound not found for letter:', letter);\n    return letter;\n  }\n}\n\nfunction App() {\n  //MARK: App\n  const congratulationsMilliseconds = 1500;\n  const wordFadeOutMilliseconds = 1000;\n  const usePolly = false;\n  // Define the initial state within the App or import from another file\n\n  let storedInputBoxChips = JSON.parse(localStorage.getItem('inputBoxChips')) || {};\n  const initialState = {\n    characterChips: [], // Initialize with your character chips data\n    inputBoxChips: storedInputBoxChips, // Initialize with your input boxes data\n    hasDropped: false,\n    fadeOut: false,\n    resetWord: false,\n    animalIndex: parseInt(localStorage.getItem('animalIndex'), 10) || 0,\n  };\n\n  console.log(\"Input box chips: \", storedInputBoxChips);\n\n  // Use useReducer hook to manage state\n  const [state, dispatch] = useReducer(reducer, initialState);\n  // Replace useState hooks with values from the state object\n  const { currentWord, characterChips, inputBoxChips, hasDropped } = state;\n\n  const [chipRefs, setChipRefs] = useState({});\n\n  // Store previous value of currentWord to determine if it has changed\n  const prevWordRef = { current: useRef(state.currentWord) };\n\n  useEffect(() => {\n    prevWordRef.current = state.currentWord;\n  });\n\n  const getInputBoxWord = () => {\n    let word = Object.keys(state.inputBoxChips)\n      .sort() // Sort the keys to ensure the correct order\n      .map(boxId => {\n        const chipId = (state.inputBoxChips[boxId] ?? ' ').replace('character-chip-', '');\n        return chipId[0]; // Assuming chipId is like 'character-chip-A'\n      })\n      .join('')\n      .replace(/\\s{2,}/g, ' ');\n    return word;\n  }\n\n  // MARK: sayWord and useEffets\n  // Say the characters in the input boxes\n  const sayWordWithBrowser = useCallback((word) => {\n    // Use the SpeechSynthesis API to pronounce the word\n    const utterance = new SpeechSynthesisUtterance(word);\n    utterance.rate = 0.6;\n    utterance.voice = getVoice();\n    window.speechSynthesis.speak(utterance);\n  }, [state.inputBoxChips]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  const sayWithPolly = (word) => {\n    const polly = new Polly({ apiVersion: '2016-06-10' });\n\n    const params = {\n      OutputFormat: 'mp3', // You can also choose other formats like 'ogg_vorbis'\n      Text: word,\n      VoiceId: 'Joanna', // Choose a voice ID from those available in Polly\n      TextType: 'text' // You can also use ssml if your text contains SSML tags\n    };\n\n    polly.synthesizeSpeech(params, (err, response) => {\n      if (err) {\n        console.error(err.message);\n      } else if (response) {\n        // Play the audio stream returned by Polly\n        const audioBlob = new Blob([response.AudioStream], { type: 'audio/mp3' });\n        const audioUrl = URL.createObjectURL(audioBlob);\n        const audio = new Audio(audioUrl);\n        audio.play();\n      }\n    });\n  }\n\n  const sayWithBrowser = (word) => {\n    if ('speechSynthesis' in window) {\n      // Browser supports speech synthesis\n      sayWordWithBrowser(word);\n    } else {\n      // Handle the error, possibly by informing the user\n      console.error('Speech synthesis not supported in this browser.');\n    }\n  }\n\n  // Update the handleSayWord function to accept a word parameter\n  const handleSayWord = useCallback((word) => {\n    word = word ?? getInputBoxWord();\n    // Use the soundOfLetter function to get the sound if there is only one letter.\n    word = word.length > 1 ? word : soundOfLetter(word);\n    if (usePolly) {\n      sayWithPolly(word);\n    } else {\n      sayWithBrowser(word);\n    }\n  }, [sayWordWithBrowser]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // This function is called only when the currentWord changes.\n  const pronounceCurrentWord = useCallback(() => {\n    // I have kind of man-handled the word display fade out here because React was eating the update latency.\n    // I need the word to display breifly, often, and then fade out.\n    if (document.getElementById('word-display')) {\n      if (document.getElementById('word-display').classList?.contains('fade-out')) {\n        document.getElementById('word-display').classList.remove('fade-out');\n        setTimeout(() => {\n          document.getElementById('word-display').classList.add('fade-out');\n        }, wordFadeOutMilliseconds);\n      }\n    }\n    if (currentWord) {\n      handleSayWord(currentWord);\n    }\n  }, [currentWord]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    pronounceCurrentWord();\n  }, [state.currentWord]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    // Set fadOut to false when the current word changes\n    dispatch({ type: ActionTypes.SET_FADE_OUT, payload: true });\n    if (prevWordRef.current !== undefined && prevWordRef.current !== state.currentWord) {\n      dispatch({ type: ActionTypes.SET_INPUT_BOX_CHIPS, payload: {} });\n    }\n  }, [state.currentWord]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    // If fadeOut is true, start the fade-out effect\n    dispatch({ type: ActionTypes.SET_FADE_OUT, payload: true });\n  }, [state.fadeOut]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // This function is called when a chip is dropped into an input-box.\n  const pronounceInputBoxes = useCallback(() => {\n    // Assuming handleSayWord can handle undefined to construct the word from input boxes\n    handleSayWord();\n  }, [handleSayWord]);\n\n  useEffect(() => {\n    pronounceInputBoxes();\n  }, [inputBoxChips]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect((e) => {\n    // Save input-boxes state to local storage when it changes\n    localStorage.setItem('inputBoxChips', JSON.stringify(inputBoxChips));\n  }, [inputBoxChips]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Check for stored input-boxes state on component mount and restore it\n  useEffect(() => {\n    const storedInputBoxChips = localStorage.getItem('inputBoxChips') || '{}';\n    if (storedInputBoxChips) {\n      const parsedInputBoxChips = JSON.parse(storedInputBoxChips);\n      dispatch({ type: ActionTypes.SET_INPUT_BOX_CHIPS, payload: parsedInputBoxChips });\n    }\n  }, []);\n\n  // MARK: Functions\n  const handleDragStart = (e) => {\n    const { id } = e.currentTarget;\n    e.dataTransfer.setData('text/plain', id);\n    e.dataTransfer.setData('parentId', e.nativeEvent.target.parentNode.id);\n\n    // Create a drag image\n    const dragImage = e.currentTarget.cloneNode(true);\n    dragImage.style.position = 'absolute';\n    dragImage.style.top = '-99999px'; // Position the drag image off-screen\n    document.body.appendChild(dragImage);\n\n    // Use the off-screen element as the drag image\n    e.dataTransfer.setDragImage(\n      dragImage,\n      dragImage.offsetWidth / 2,\n      dragImage.offsetHeight / 2\n    );\n\n    // Remove the drag image from the DOM after the drag operation starts\n    setTimeout(() => {\n      if (document.body.contains(dragImage)) {\n        document.body.removeChild(dragImage);\n      }\n    }, 0); // Use setTimeout to defer the removal until after the drag image is used\n  };\n\n  const handleDragOver = (e) => {\n    e.preventDefault(); // Necessary to allow dropping\n  };\n\n  const handleTouchMove = useCallback((e) => {\n    e.target.classList.add('dragging');\n    e.parentId = e.target.parentNode.id;\n    // Get the touch coordinates\n    const touchLocation = e.targetTouches[0];\n    // Set the style to move the element with the touch\n    e.target.style.position = 'absolute';\n    e.target.style.left = `${touchLocation.pageX - e.target.offsetWidth / 2}px`;\n    e.target.style.top = `${touchLocation.pageY - e.target.offsetHeight / 2}px`;\n  }, []);\n\n  const handleDrop = (event, targetInputBoxId) => {\n    event.preventDefault();\n    // Get the dragged chip ID either from touch or mouse dataTransfer\n    const draggedChipId\n      = event.dataTransfer\n        ? event.dataTransfer.getData(\"text/plain\")\n        : event.target.id; // Assuming the touch event sets the id on the target\n\n    // Don't drag an input box.\n    if (draggedChipId.includes(\"input-box-\")) return;\n\n    let draggedFromLocation\n      = event.dataTransfer\n        ? event.dataTransfer.getData(\"parentId\")\n        : event.parentId; // 'characterChips' or 'inputBoxChips'\n\n    const droppedIntoInputBoxId = targetInputBoxId;\n    // Update the state to reflect the chip moving from the source to the destination\n    dispatch({\n      type: ActionTypes.MOVE_CHIP,\n      payload: {\n        sourceChipId: draggedChipId,\n        sourceLocation: draggedFromLocation, // 'characterChips' or 'inputBoxChips'\n        targetInputBoxId: droppedIntoInputBoxId, // This might be undefined if dropping back to character tray\n      },\n    });\n  };\n\n  const handleTouchEnd = useCallback((e) => {\n    // MARK: Handle touch end\n    e.preventDefault(); // Prevent the default touch behavior\n    const touchLocation = e.changedTouches[0];\n    const touchPoint = { x: touchLocation.clientX, y: touchLocation.clientY };\n    const draggedChipId = e.target.id;\n    // const sourceLocation = /* determine if the chip came from an input box or the character tray */;\n\n    const targetInputBoxId\n      = Object\n        .keys(inputBoxChips)\n        .find(id => {\n          const inputBox = document.getElementById(id);\n          const boxRect = inputBox.getBoundingClientRect();\n          return (\n            touchPoint.x >= boxRect.left &&\n            touchPoint.x <= boxRect.right &&\n            touchPoint.y >= boxRect.top &&\n            touchPoint.y <= boxRect.bottom\n          );\n        });\n\n    // Reset styles or any state as needed\n    e.target.classList.remove('dragging');\n    e.target.removeAttribute('style');\n    e.target.style.position = '';\n    e.target.style.left = '';\n    e.target.style.top = '';\n    // Determine if the chip was dragged from an input box or the character tray for touch or click.\n    const parentId\n      = e.target.parentNode\n        ? e.target.parentNode.id\n        : document.getElementById(e.target.id).parentNode.id;\n    // Call handleDrop with the necessary information\n    handleDrop({\n      preventDefault: () => { }, // Mock preventDefault function\n      dataTransfer: false, // Mock dataTransfer\n      parentId: parentId,\n      target: { id: draggedChipId }, // Set the id of the dragged chip\n    }, targetInputBoxId);\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // MARK: UseEffects\n  useEffect(() => {\n    // Check if all input-boxes are filled correctly\n    const allBoxesString = Object.values(state.inputBoxChips)\n      .map(c => (c ?? ' ').substring(15, 16)).join('');\n\n    if (allBoxesString === state.currentWord) {\n      // TODO: Celebrate success better\n      confetti({\n        particleCount: 150,     // Increase number of particles\n        spread: 70,             // Wider spread\n        startVelocity: 30,      // Higher initial velocity\n        gravity: 0.5,           // Adjust gravity, less means longer float\n        ticks: 200,             // Number of times the confetti will move (duration)\n        origin: {               // Where on the page the confetti will start\n          x: 0.5,               // Horizontal center\n          y: 0.5                // Vertical center\n        }\n      });\n\n      dispatch({ type: ActionTypes.CONGRATULATE });\n\n      // Progress to next animal\n      setTimeout(() => {\n        dispatch({ type: ActionTypes.PROGRESS_TO_NEXT_ANIMAL });\n      }, congratulationsMilliseconds)\n    }\n  }, [state.inputBoxChips, dispatch]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    // Select an animal from the animal list\n    const newWord = animals[state.animalIndex].name;\n    let newInputBoxChips = JSON.parse(localStorage.getItem('inputBoxChips')) || {};\n\n    if (state.resetWord) {\n      newInputBoxChips = {};\n      for (let i = 0; i < newWord.length; i++) {\n        newInputBoxChips[`input-box-${i}`] = null;\n      }\n    }\n\n    // Split the new word into characters and create chips for them\n    const wordCharacters = newWord.split('').map((char, index) => ({\n      id: `character-chip-${char}-${index}`,\n      char: char\n    }));\n\n    // Create extra random characters and add them to the array\n    const extraChars = Math.ceil(newWord.length * 0.5);\n    const randomCharacters = Array.from({ length: extraChars }, (_, i) => {\n      const randomChar = String.fromCharCode(65 + Math.floor(Math.random() * 26));\n      return {\n        id: `character-chip-${randomChar}-${newWord.length + i}`,\n        char: randomChar\n      };\n    });\n\n    // Combine the word characters with the extra random characters\n    const characters = [...wordCharacters, ...randomCharacters];\n\n    // Shuffle the combined characters array\n    const shuffledCharacters = characters.sort(() => 0.5 - Math.random());\n\n    // Dispatch the INIT_NEW_WORD action with the new structure\n    dispatch({\n      type: ActionTypes.INIT_NEW_WORD,\n      payload: {\n        newWord,\n        newInputBoxChips,\n        shuffledCharacters,\n      },\n    });\n  }, [state.animalIndex, dispatch]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Use an effect to call your callback after the state has been updated\n  useEffect(() => {\n    if (hasDropped) {\n      // Reset the drop indicator\n      dispatch({ type: ActionTypes.SET_HAS_DROPPED, payload: false })\n    }\n  }, [hasDropped, dispatch]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useEffect(() => {\n    // Perform any necessary cleanup\n    return () => {\n      // Remove any cloned elements that might have been appended to the body\n      const dragImages = document.querySelectorAll('.drag-image'); // Use a specific class or identifier for your drag images\n      dragImages.forEach(img => img.remove());\n    };\n  }, []); // Empty dependency array ensures this runs on mount and unmount only\n\n  useEffect(() => {\n    // Create a ref for each character chip\n    const newChipRefs = characterChips.reduce((acc, chip) => {\n      acc[chip.id] = React.createRef();\n      return acc;\n    }, {});\n\n    setChipRefs(newChipRefs);\n  }, [characterChips]);\n\n  useEffect(() => {\n    const handleTouchMove = (e) => {\n      e.preventDefault(); // This should prevent the default scrolling behavior\n      // Duplicated from handleTouchMove\n      e.target.classList.add('dragging');\n      e.parentId = e.target.parentNode.id;\n      // Get the touch coordinates\n      const touchLocation = e.targetTouches[0];\n      // Set the style to move the element with the touch\n      e.target.style.position = 'absolute';\n      e.target.style.left = `${touchLocation.pageX - e.target.offsetWidth / 2}px`;\n      e.target.style.top = `${touchLocation.pageY - e.target.offsetHeight / 2}px`;\n    };\n    // Attach the event listener to each chip\n    Object.values(chipRefs).forEach(ref => {\n      const chipElement = ref.current;\n      if (chipElement) {\n        chipElement.addEventListener('touchmove', handleTouchMove, { passive: false });\n      }\n    });\n\n    // Cleanup function to remove the event listeners\n    return () => {\n      Object.values(chipRefs).forEach(ref => {\n        const chipElement = ref.current;\n        if (chipElement) {\n          chipElement.removeEventListener('touchmove', handleTouchMove);\n        }\n      });\n    };\n  }, [chipRefs, handleTouchMove]); // Run this effect whenever chipRefs changes\n\n  // Determine the class to apply based on the state.fadeOut property\n  const wordDisplayClass = state.fadeOut ? 'fade-out' : '';\n\n  // MARK: return JSX\n  return (\n    <div className=\"app\">\n      <div>\n        <header className=\"header\" >\n          spellsay.com\n        </header>\n        {/* Display the current word and its image (if applicable) */}\n        {currentWord && (\n          <>\n            <img\n              onClick={() => pronounceCurrentWord(currentWord)}\n              className=\"word-image\"\n              src={`/assets/images/${currentWord}.webp`} alt={currentWord} />\n            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n              <div className=\"nav-buttons\" onClick={() => dispatch({ type: ActionTypes.DECREMENT_ANIMAL_INDEX })}>\n                &larr;\n              </div>\n              <label\n                id=\"word-display\"\n                onClick={() => pronounceCurrentWord(currentWord)}\n                className={`word-display ${wordDisplayClass}`}\n              >{currentWord}</label>\n              <div className=\"nav-buttons\" onClick={() => dispatch({ type: ActionTypes.INCREMENT_ANIMAL_INDEX })}>\n                &rarr;\n              </div>\n            </div>\n          </>\n        )}\n      </div>\n      <div\n        id=\"input-boxes\"\n        className=\"input-boxes\">\n        {Object.keys(inputBoxChips).map((inputBoxId) => {\n          const chipId = inputBoxChips[inputBoxId];\n          const chip = chipId ? {\n            id: chipId,\n            char: chipId.substring(15, 16),\n          } : null;\n          return (\n            <div\n              key={inputBoxId}\n              id={inputBoxId}\n              className=\"input-box\"\n              onDrop={(event) => handleDrop(event, inputBoxId)} // Pass the inputBoxId to handleDrop\n              // onTouchEnd={handleTouchEnd}\n              onDragOver={handleDragOver}\n            >\n              {chip ? <CharacterChip\n                ref={chipRefs[chip.id]} // Attach the correct ref for this chip\n                key={chip.id}\n                id={chip.id}\n                char={chip.char}\n                onDragStart={handleDragStart}\n                onTouchEnd={handleTouchEnd}\n              // onTouchMove and onTouchEnd are now handled by the added event listener\n              /> : null}\n            </div>\n          );\n        })}\n      </div>\n      <div\n        id=\"character-tray\"\n        className=\"character-tray\" >\n        {characterChips.map((chip) => (\n          <CharacterChip\n            ref={chipRefs[chip.id]} // Attach the correct ref for this chip\n            key={chip.id}\n            id={chip.id}\n            char={chip.char}\n            onDragStart={handleDragStart}\n            onTouchEnd={handleTouchEnd}\n          // onTouchMove and onTouchEnd are now handled by the added event listener\n          />\n        ))}\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}